var output_variables = {
  "username":"Not Set",
  "launcher_version":"0.61",
  "game_version":"Not Installed",
  "download_progress":"80%",
  "server_filter_players_min":0,
  "server_filter_players_max":64,
  "server_filter_same_game_version":true,
};

var server_list = [];

function variable_observer(changeDefinition) {
  if(changeDefinition[0] == "update" || changeDefinition[0] == "add") {
    for(var element in $$(output[{changeDefinition[2]}]) ) {
      element.value = changeDefinition[3];
    }
    for(var element in $$(progressbar[{changeDefinition[2]}]) ) {
      stdout.println("found progressbar");
      element.style["width"] = changeDefinition[3];
    }
  }
}

Object.addObserver(output_variables, variable_observer);

function set_username(username) {
  output_variables["username"] = username;
  view.set_playername(username);
}

function close_overlay() {
  if ($(div.menuEntries > .current)) {
    $(div.menuEntries > .current).attributes.removeClass("current");
  }
  current_page.attributes.addClass("current");
  var overlay = $(#overlay);
  overlay.text = "";
  overlay.style["visibility"] = "hidden";
  $(div.menuEntries).state.disabled = false;
}

function initialize_variables() {
  output_variables["username"] = view.get_playername();
  output_variables["launcher_version"] = view.get_launcher_version();
  output_variables["game_version"] = view.get_game_version();
}

function onPingResult(server, time_response) {
  for ( var i = 0; i < server_list.length; i++ ) {
    if ( server_list[i].data["IP"] + ":" + server_list[i].data["Port"] == server ) {
      server_list[i].latency = time_response + " ms";
      break;
    }
  }
}

function getServersCallback(results) {
  var updated = [];
  var old_length = server_list.length;
  output_variables["players_online"] = 0;
  for (var i = 0; i < old_length; i++) updated[i] = false;
  for(var changed in results) {
    var in_range = changed["Players"] >= output_variables["server_filter_players_min"] &&  changed["Players"] <= output_variables["server_filter_players_max"];
    var result = {
      locked: changed["Variables"]["bPassworded"],
      name: changed["Name"],
      map: changed["Current Map"].substr(changed["Current Map"].indexOf("-")+1).replace("_", " "),
      players: changed["Players"] + "/" + changed["Variables"]["Player Limit"],
      latency: "-",

      display: in_range && changed["Game Version"] == output_variables["game_version"],
      in_player_range: in_range,
      same_version: changed["Game Version"] == output_variables["game_version"],
      data: changed,
    }
    output_variables["players_online"] += changed["Players"].toInteger();
    view.get_ping(result.data["IP"]+":"+result.data["Port"], onPingResult);
    var exists = false;
    for (var i = 0; i < old_length; i++) {
      if (result.data.IP == server_list[i].data.IP && result.data.Port == server_list[i].data.Port) {
        exists = true;
        server_list[i] = result;
        updated[i] = true;
        break;
      }
    }
    if(!exists) {
      server_list.push(result);
    }
  }
  for (var i = old_length-1; i > 0; i--) if( !updated[i] ) server_list.remove(i);
  stdout.println("refreshed servers");
}
