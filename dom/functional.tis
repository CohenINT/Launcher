var output_variables = {
  "username":"Not Set",
  "launcher_version":"0",
  "game_version":"Not Installed",
  "hash_progress":"0",
  "download_progress":"0",
  "patch_progress":"0",
  "update_progress":"0",
  "server_filter_players_min":0,
  "server_filter_players_max":64,
  "server_filter_same_game_version":true,
  "current_action": "None",
  "update_available": false,
};

var server_list = [];

var news_items = [];
var footer;
var frame_id = 0;

function footer_progress() {
  footer = this;
  set_footer();
}

function set_footer() {
  switch(output_variables["current_action"]) {
    case "None":
      if(!output_variables["update_available"]) {
        footer.html = "<div.hexpand.hflow.vcenter><p.uppercase.green.hexpand.vcenter>&#10003; Your game is up-to-date!</p><button.green #launch>Launch to Menu</button></div>";
        $(button.green#launch).@["onclick"] = "launchGame();";
      } else {
        footer.html = "<div.hexpand.hflow.vcenter><p.uppercase.red.hexpand.vcenter>&#10005; "+output_variables["popup_title"]+"</p><button.green #update>"+output_variables["popup_green"]+" Game</button></div>";
        $(button.green#update).@["onclick"] = output_variables["button_onclick"];
      }
      break;
    default:
      footer.html = "\
    <div.downloadBar><progressbar.indicator update_progress/></div>\
    <p.nowrap style=\"float:left;\"><output current_action/>: <span.green><output update_progress/>%</span></p>\
    <p overlay=\"verify.htm\" style=\"float:right;\">more details</p>";

      stdout.println("set_footer: Unhandled case for: " + output_variables["current_action"]);
  }
}

function news_feed_callback(text) {
  var arr = text.match(/(<item>(?:.|\n)+?<\/item>)/gm);
  var frame = $(frame);
  for (var i=0; i < arr.length; i++) {
    var text = arr[i];
    var item = {
      title: text.match(/<title>(?:<!\[CDATA\[)?([\w\W\_\-]+?)(?:\]\]>)?<\/title>/m)[1],
      link: text.match(/<link>(?:<!\[CDATA\[)?((?:.|\n)+?)(?:\?.+?)(?:\]\]>)?<\/link>/m)[1],
      description: text.match(/<description>(?:<!\[CDATA\[)?((?:.|\n)+?)(?:\]\]>)?<\/description>|<description\/()>/m)[1],
      pubDate: text.match(/<pubDate>(?:<!\[CDATA\[)?((?:.|\n)+?)(?:\]\]>)?<\/pubDate>/m)[1],
    };
    news_items.push(item);
    if (i==0) view.fetch_resource(news_items[i].link+"?preview=1", {"Referer": "https://renegade-x.com/forums/forum/7-news/", "X-Requested-With": "XMLHttpRequest", "TE": "Trailers", "Pragma": "no-cache"}, load_news_item, {"id": i, "frame": undefined});
  }
}

function load_news_feed() {
  view.fetch_resource("https://renegade-x.com/rss/1-recent-news.xml/", {"Referer": "https://renegade-x.com/forums/forum/7-news/", "X-Requested-With": "XMLHttpRequest", "TE": "Trailers", "Pragma": "no-cache"}, news_feed_callback, this);
}

function image_callback(bytes) {
  var escaped_url = url.replace(/([\?\.\|\/\?\(\)])/g, "\\$1").trim();
  if(bytes) {
    var image = Image.fromBytes(bytes);
    if(image && url) {
      var url_regex = new RegExp(escaped_url, "g");
      var filetype = escaped_url.split('.').pop();
      news_items[id].html = news_items[id].html.replace(url_regex, "data:image/webp;base64,"+image.toBytes(#webp, 100).toString("base64"));
    } else {
      stdout.println("Image at url \""+escaped_url+"\" appears to be damaged.");
      var escaped_tag = "<img[^>]+?src=\""+escaped_url+"\"[^>]*?\/>";
      var image_regex = new RegExp(escaped_tag, "g");
      news_items[id].html = news_items[id].html.replace(image_regex, "");
    }
  } else {
    stdout.println("Image at url \""+escaped_url+"\" appears to be missing.");
    var escaped_tag = "<img[^>]+?src=\""+escaped_url+"\"[^>]*?\/>";
    var image_regex = new RegExp(escaped_tag, "g");
    news_items[id].html = news_items[id].html.replace(image_regex, "");
  }
  var regex = /<img[^>]+?src="(http[^"]+?\.(?!gif)[^"]{3,4}(?:\?[^"]+?)?)"[^>]*?>/;
  var img = news_items[id].html.match(regex);
  if (img && img[1]) view.fetch_image(img[1], {}, image_callback, {id:id,url:img[1],frame:this.frame});
  else if (id==frame_id) {
    if (this.frame) {
      this.frame.load(news_items[id].html, "");
    } else if (var news_frame = $(#news) && news_frame) {
      news_frame.load(news_items[id].html, "");
    }
  }
}

function load_news_item(text) {
  text = text.replace(/\s<\/span/g, "&nbsp;</span").replace(/[\r\n\s\t]+/g, " ").replace(/>\s</, ">&nbsp;<");
  var topicID = text.match(/data-topicID='(.+?)'/)[1];
  text = text.replace(new RegExp("_"+topicID,"g"), "_topicID");
  var youtube_regex = /<i?frame[^>]+?(?:src="(?:https?:\/\/)?(?:www\.|m\.)?(?:youtube\.com|youtu.be)\/(?:[\w\-\_]+\?v=|embed\/|v\/)?([\w\-\_]+)(?:\S+)?"[^>]*?)(?:\/>|>[^<>]*?<\/i?frame>)/g;
  text = text.replace(youtube_regex, "<a.playable href=\"https://youtube.com/watch?v=$1\"><img src=\"https://img.youtube.com/vi_webp/$1/maxresdefault.webp\"/></a>");

  var iframe_regex = /<i?frame[^>]*?(?:\/>|>[^<>]*?<\/i?frame>)/g;
  text = text.replace(iframe_regex, "");

  news_items[id].html = text;
  if (this.frame) this.frame.load(text,"");
  var regex = /<img[^>]+?src="(http[^"]+?\.(?!gif)[^"]{3,4}(?:\?[^"]+?)?)"[^>]*?>/;
  var img = text.match(regex);
  if (img && img[1]) view.fetch_image(img[1], {}, image_callback, {id:id,url:img[1],frame: this.frame});
}

function variable_observer(changeDefinition) {
  if(changeDefinition[0] == "update" || changeDefinition[0] == "add") {
    for(var element in $$(output[{changeDefinition[2]}]) ) {
      element.value = changeDefinition[3]==0?"0":changeDefinition[3];
    }
    for(var element in $$(progressbar[{changeDefinition[2]}]) ) {
      element.style["width"] = changeDefinition[3]==0?"0%":changeDefinition[3]+"%";
    }
    if(changeDefinition[2] == "current_action" || changeDefinition[2] == "update_available") {
      set_footer();
    }
  }
}

Object.addObserver(output_variables, variable_observer);

function set_username(username) {
  output_variables["username"] = username;
  view.set_playername(username);
}

function show_overlay(page) {
  if ($(div.menuEntries > .current)) {
    $(div.menuEntries > .current).attributes.removeClass("current");
  }
  var overlay = $(#overlay);
  overlay.load(page);
  overlay.style["visibility"] = "visible";
  $(div.menuEntries).state.disabled = true;
}

function close_overlay() {
  if ($(div.menuEntries > .current)) {
    $(div.menuEntries > .current).attributes.removeClass("current");
  }
  current_page.attributes.addClass("current");
  var overlay = $(#overlay);
  overlay.text = "";
  overlay.style["visibility"] = "collapse";
  $(div.menuEntries).state.disabled = false;
}

function initialize_variables() {
  output_variables["username"] = view.get_playername();
  output_variables["launcher_version"] = view.get_launcher_version();
  output_variables["game_version"] = view.get_game_version();
}

function onPingResult(server, time_response) {
  for ( var i = 0; i < server_list.length; i++ ) {
    if ( server_list[i].data["IP"] + ":" + server_list[i].data["Port"] == server ) {
      server_list[i].latency = time_response + " ms";
      break;
    }
  }
}

function tick_checkmark(element, boolean) {
  if(boolean && !element.attributes.hasClass("checked") && !element.attributes.hasClass("ticked")) {
    element.attributes.addClass("checked");
  } else if (!boolean && element.attributes.hasClass("checked")) {
    element.attributes.removeClass("checked");
  }
}

/// Joining game related things
function onGameExit() {
  if($(img#map_image) != undefined) {
    $(img#map_image).attributes["src"] = $(img#map_image).attributes["src-disabled"];
  }
  stdout.println("Game exited succesfully!");
}

function onGameError(ErrorMessage) {
  if($(img#map_image) != undefined) {
    $(img#map_image).attributes["src"] = $(img#map_image).attributes["src-disabled"];
  }
  show_overlay("error.htm");
  output_variables["error_message"] = ErrorMessage
}

function joinServer(password = undefined) {
  var servers = $(table.servers);
  var entry = servers.value[servers.tbody.currentIndex]["data"];
  if (entry["Variables"]["bPassworded"] && !password) {
    show_overlay("password.htm");
  } else {
    view.launch_game( entry["IP"]+":"+entry["Port"] + ( password? "?Password="+password : "" ), onGameExit, onGameError);
    if($(img#map_image) != undefined) {
      $(img#map_image).attributes["src-disabled"]=$(img#map_image).attributes["src"];
      $(img#map_image).attributes["src"]= "";
    }
  }
}

function launchGame() {
  view.launch_game("", onGameExit, onGameError);
  if($(img#map_image) != undefined) {
    $(img#map_image).attributes["src-disabled"]=$(img#map_image).attributes["src"];
    $(img#map_image).attributes["src"]= "";
  }
}

function getServersCallback(results) {
  var updated = [];
  var old_length = server_list.length;
  output_variables["players_online"] = 0;
  for (var i = 0; i < old_length; i++) updated[i] = false;
  for(var changed in results) {
    if(!changed) continue;
    var in_range = changed["Players"] >= output_variables["server_filter_players_min"] &&  changed["Players"] <= output_variables["server_filter_players_max"];
    var result = {
      locked: changed["Variables"]["bPassworded"],
      name: changed["Name"],
      map: changed["Current Map"].substr(changed["Current Map"].indexOf("-")+1).replace("_", " "),
      players: changed["Players"] + "/" + changed["Variables"]["Player Limit"],
      latency: "-",

      display: in_range && changed["Game Version"] == output_variables["game_version"],
      in_player_range: in_range,
      same_version: changed["Game Version"] == output_variables["game_version"],
      data: changed,
    }
    output_variables["players_online"] += changed["Players"].toInteger();
    view.get_ping(result.data["IP"]+":"+result.data["Port"], onPingResult);
    var exists = false;
    for (var i = 0; i < old_length; i++) {
      if (result.data.IP == server_list[i].data.IP && result.data.Port == server_list[i].data.Port) {
        exists = true;
        server_list[i] = result;
        updated[i] = true;
        break;
      }
    }
    if(!exists) {
      server_list.push(result);
    }
  }
  for (var i = old_length-1; i > 0; i--) if( !updated[i] ) server_list.remove(i);
  stdout.println("refreshed servers");
}

function updateFilter(arg1, arg2 = undefined) {
  if (arg2) {
    var min = arg1;
    var max = arg2;
    for(var i = 0; i < server_list.length; i++) {
      if(server_list[i].data["Players"] >= min && server_list[i].data["Players"] <= max) {
        server_list[i].in_player_range = true;
        stdout.println(server_list[i].data["Game Version"]);
        stdout.println(output_variables["game_version"]);
        server_list[i].display = $(div.filterbar > checkmark).attributes.hasClass("checked")?(server_list[i].data["Game Version"] == output_variables["game_version"]):true;
      } else {
        server_list[i].in_player_range = false;
        server_list[i].display = false;
      }
    }
  } else {
    var same_version = arg1;
    for(var i = 0; i < server_list.length; i++) {
      server_list[i].display = server_list[i].in_player_range && same_version?(server_list[i].data["Game Version"] == output_variables["game_version"]):true;
    }
  }
}

function launcher_progress(progress) {
  var values = JSON.parse(progress);
  output_variables["download_progress"] = values[0] * 100 / values[1];
}

function update_launcher() {
  view.update_launcher(launcher_progress);
  output_variables["current_action"] = "Installing launcher update";
  show_overlay("launcher-update.htm");
}

function check_launcher_result(new_version = undefined) {
  stdout.println("result launcher: " + new_version);
  if(new_version != null) {
    output_variables["popup_title"] = "A new launcher update is available";
    output_variables["popup_message"] = "Version " + new_version + " of the launcher is now available!";
    output_variables["popup_green"] = "UPDATE";
    show_overlay("popup_ok.htm");
    $(#overlay button.green).@["onclick"] = "update_launcher();";
    $(#overlay .close).@["onclick"] = "view.check_update(onUpdateCallback, onUpdateErr);";
  } else {
    view.check_update(onUpdateCallback, onUpdateErr);
  }
}

function onProgress(progress) {
  output_variables["hash_progress"] = ( progress["hash"][1] != 0 )? progress["hash"][0]*100 / progress["hash"][1]:0;
  output_variables["download_progress"] = ( progress["download"][1] != 0 )? progress["download"][0]*100 / progress["download"][1]:0;
  output_variables["patch_progress"] = ( progress["patch"][1] != 0 )? progress["patch"][0]*100 / progress["patch"][1]:0;
  output_variables["update_progress"] = output_variables["hash_progress"]/3 + output_variables["download_progress"]/3 + output_variables["patch_progress"]/3;
}

function onUpdateCallback(reason) {
  switch (reason) {
    case "up_to_date":
      break;
    case "full":
      output_variables["update_available"] = true;
      output_variables["popup_title"] = "The game is not installed";
      output_variables["popup_message"] = "Would you like to install?";
      output_variables["popup_green"] = "INSTALL";
      output_variables["popup_gray"] = "NOT NOW";
      output_variables["button_onclick"] = "view.install_redists(onRedistDone, onUpdateErr); output_variables[\"current_action\"] = \"Installing game dependencies\"; show_overlay(\"launcher-update.htm\");";
      show_overlay("popup_choice.htm");
      $(#overlay button.green).@["onclick"] = output_variables["button_onclick"];
      break;
    case "resume":
      output_variables["current_action"] = "Resuming game installation";
      show_overlay("verify.htm");
      view.start_download(onProgress, onUpdateDone, onUpdateErr);
      break;
    case "patch":
      output_variables["update_available"] = true;
      output_variables["popup_title"] = "A new game update is available";
      output_variables["popup_message"] = "Would you like to update?";
      output_variables["popup_green"] = "UPDATE";
      output_variables["popup_gray"] = "DELAY";
      output_variables["button_onclick"] = "view.start_download(onProgress, onUpdateDone, onUpdateErr); output_variables[\"current_action\"] = \"Updating game\"; show_overlay(\"verify.htm\");";
      show_overlay("popup_choice.htm");
      $(#overlay button.green).@["onclick"] = output_variables["button_onclick"];
      break;
    case "validate":
      output_variables["current_action"] = "Validating game installation";
      show_overlay("verify.htm");
      view.start_download(onProgress, onUpdateDone, onUpdateErr);
      break;
  }
}

function onUpdateErr(err) {
  var current_action = output_variables["current_action"];
  output_variables["current_action"] = "None";
  output_variables["popup_title"] = "An error has occurred while updating";
  output_variables["popup_message"] = "An error has occurred while \""+current_action+"\", the error states: </p><p>" + err;
  output_variables["popup_green"] = "Oh well...";
  show_overlay("popup_ok.htm");
}

function onRedistDone() {
  view.start_download(onProgress, onUpdateDone, onUpdateErr);
  output_variables["current_action"] = "Installing game";
  if($(#overlay) && $(#overlay).style["visibility"] == "visible") show_overlay("verify.htm");
}

function onUpdateDone() {
  var current_action = output_variables["current_action"];
  output_variables["current_action"] = "None";
  output_variables["update_available"] = false;
  output_variables["game_version"] = view.get_game_version();
  view.get_servers(getServersCallback);
  output_variables["popup_title"] = "Finished!";
  output_variables["popup_message"] = "The action \""+current_action+"\" was completed succesfully!";
  output_variables["popup_green"] = "OK";
  show_overlay("popup_ok.htm");
}

function onError(err) {
  var current_action = output_variables["current_action"];
  output_variables["current_action"] = "None";
  output_variables["popup_title"] = "An error has occurred";
  output_variables["popup_message"] = "An error has occurred during \""+current_action+"\", the error states: </p><p>" + err;
  output_variables["popup_green"] = "Oh well...";
  show_overlay("popup_ok.htm");
}

function resetGameUI() {
  output_variables["popup_title"] = "Reset game?";
  output_variables["popup_message"] = "This will reset your game to a newly installed state, removing any custom content that you may have, please confirm.";
  output_variables["popup_green"] = "I AM SURE";
  output_variables["popup_gray"] = "CANCEL";
  show_overlay("popup_choice.htm");
  $(#overlay button.green).@["onclick"] = "view.remove_unversioned(onUpdateCallback, onError); output_variables[\"current_action\"] = \"Removing unversioned files\"; show_overlay(\"verify.htm\"); ";
}
